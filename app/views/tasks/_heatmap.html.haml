#chart

:javascript
  // I got (then modified) this from http://bl.ocks.org/tjdecke/5558084
  var margin = {
      top:    50,
      right:  0,
      bottom: 100,
      left:   30
    },
    width = 960 - margin.left - margin.right,
    height = 430 - margin.top - margin.bottom,
    gridSize = Math.floor(width / 24),
    legendElementWidth = gridSize * 2,
    buckets = 9,
    colors = [
      "#ffffd9", "#edf8b1", "#c7e9b4", "#7fcdbb", "#41b6c4",
      "#1d91c0", "#225ea8", "#253494", "#081d58"
    ], // alternatively, colorbrewer.YlGnBu[9]
    days = ["Mo", "Tu", "We", "Th", "Fr", "Sa", "Su"],
    times = [
      "12a", "1a", "2a", "3a", "4a", "5a", "6a", "7a", "8a", "9a", "10a", "11a",
      "12p", "1p", "2p", "3p", "4p", "5p", "6p", "7p", "8p", "9p", "10p", "11p" ];

  // The :path_prefix is passed in as a param to this partial.
  // It is something like "tasks/13".
  d3.json("#{path_prefix}/heatmap.json", function(error, data) {

    // we're asking for 9 buckets (configured above)
    // evenly breaking up the values from 0 to max_value
    // using the array of colors we created above
    var colorScale = d3.scale.quantile()
      .domain([0, buckets - 1, d3.max(data, function(d) { return d.value; })])
      .range(colors);

    //  create the svg container of the chart with
    //  <div id="chart">
    //      with width/height/margins configured above
    //      <svg wdth="" ht="">
    //          centered within the frame
    //          <g tranform="translate(to,center)">
    var svg = d3.select("#chart")
      .append("svg")
      .attr("width", width + margin.left + margin.right)
      .attr("height", height + margin.top + margin.bottom)
      .append("g")
      .attr("transform", "translate(" + margin.left + "," + margin.top + ")");

    // go through the array of day-names, and
    // on the very left (x=0) of the chart div
    // create <text> elems
    // on the y-tick grid boundaries but translated up a bit (magic number 6)
    // add the css class "axis-workweek" to Mo-Fr to make those labels black
    // for everyone else add "mono" to make them grey
    // these are defined in application.css.scss
    var dayLabels = svg.selectAll(".dayLabel")
      .data(days)
      .enter()
      .append("text")
      .text(function(d) { return d; })
      .attr("x", 0)
      .attr("y", function(d, i) { return i * gridSize; })
      .style("text-anchor", "end")
      .attr("transform", "translate(-6," + gridSize / 1.5 + ")")
      .attr("class", function(d, i) {
        return ((i >= 0 && i <= 4) ?
          "dayLabel mono axis axis-workweek" :
          "dayLabel mono axis");
      });

    // along the top (y=0) of the chart, create <text>s for the hour labels
    var timeLabels = svg.selectAll(".timeLabel")
      .data(times)
      .enter()
      .append("text")
      .text(function(d) { return d; })
      .attr("x", function(d, i) { return i * gridSize; })
      .attr("y", 0)
      .style("text-anchor", "middle")
      .attr("transform", "translate(" + gridSize / 2 + ", -6)")
      .attr("class", function(d, i) {
        return ((i >= 7 && i <= 16) ?
          "timeLabel mono axis axis-worktime" :
          "timeLabel mono axis");
      });

    // plop the colored squares
    // using <rect> elems of width and height = (magic number) 4
    // in (x=hour_slot,y=day_slot)
    // all start out with the default color
    // hours are ints in range 1..24
    // but they're being mapped to 0..23
    // we must make sure that 24 (12am) is mapped to the beginning
    var heatMap = svg.selectAll(".hour")
      .data(data)
      .enter()
      .append("rect")
      .attr("x", function(d) { return (d.hour == 24 ? 0 : d.hour) * gridSize; })
      .attr("y", function(d) { return (d.day - 1) * gridSize; })
      .attr("rx", 4)
      .attr("ry", 4)
      .attr("class", "hour bordered")
      .attr("width", gridSize)
      .attr("height", gridSize)
      .style("fill", colors[0]);

    // take 1 second to fade the colors into each square
    // from colors[0] to its real "bucketed" value
    heatMap.transition()
      .duration(1000)
      .style("fill", function(d) { return colorScale(d.value); });

    // I don't think I'm using this...it looks like it's supposed to
    // add the value as text to the tiles? I don't really want that anyway.
    heatMap.append("title")
      .text(function(d) { return d.value; });

    var legend = svg.selectAll(".legend")
      // see here: github.com/mbostock/d3/wiki/Arrays#d3_quantile
      // this produces 0, 7 inner values separated evenly by sorted index, max
      // this is to produce a (more) even distribution of colors on the chart
      .data([0].concat(colorScale.quantiles()), function(d) { return d; })
      .enter()
      // create a <g> elem for each quantile
      .append("g")
        .attr("class", "legend");

    // inside each <g>, add a <rect> for the color key
    legend.append("rect")
      // each evenly spaced apart from the last
      .attr("x", function(d, i) { return legendElementWidth * i; })
      // at the bottom of the chart
      .attr("y", height)
      .attr("width", legendElementWidth)
      .attr("height", gridSize / 2)
      .style("fill", function(d, i) { return colors[i]; });

    // inside each <g> add a <text> for the legend labels
    // styled the same as the non-workhour axis-labels
    legend.append("text")
      .attr("class", "mono")
      .text(function(d) { return "â‰¥ " + Math.round(d); })
      .attr("x", function(d, i) { return legendElementWidth * i; })
      .attr("y", height + gridSize);
  });
