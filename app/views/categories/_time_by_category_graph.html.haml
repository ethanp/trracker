/ base code from http://bl.ocks.org/mbostock/3020685, 7/31/2014

#chart

%script{:src => "http://d3js.org/d3.v3.js"}

:css
  /* this is the font for the x-axis */
  body {
    font: 10px sans-serif;
  }

  /* this colors the axis lines and the axis ticks */
  .axis path, .axis line {
    fill: none;
    stroke: #000;
    shape-rendering: crispEdges;
  }


:javascript

  // define std date parser for parsing incoming date
  var format = d3.time.format("%m/%d/%y");

  /* Define bounds of the <svg> element containing the chart.
     But give it (req'd) spacing between where the data is rendered,
     and the actual bounds of the <svg> element. */
  var margin = {top: 20, right: 30, bottom: 30, left: 40},
      width = 960 - margin.left - margin.right,
      height = 500 - margin.top - margin.bottom;

  /* "An extension of d3.scale.linear that uses JavaScript Date objects as the
      domain representation. Provides suitable ticks based on time intervals."
      (https://github.com/mbostock/d3/wiki/Time- Scales) */
  var x = d3.time.scale()
      .range([0, width]);

  /* maps a Domain (which will be determined once the data is received) to an
     appropriate Range, so that higher y values have higher height in the chart,
     and the highest values reach near the top of the chart */
  var y = d3.scale.linear()
      .range([height, 0]);

  /* Constructs a new ordinal scale with a range of twenty categorical colors
     (https://github.com/mbostock/d3/wiki/Ordinal-Scales) */
  var z = d3.scale.category20c();


  /* 1. Create a new axis to go on the bottom.
     2. Scale it according to the scaling-function defined as "x" above.
     3. In particular, use "days" to generate tick values when rendering. */
  var xAxis = d3.svg.axis()
      .scale(x)
      .orient("bottom")
      .ticks(d3.time.days);

  var yAxis = d3.svg.axis()
      .scale(y)
      .orient("left");

  /* * This graph shall use the "stack" layout, which allows you to render
        elements one above the other (Cartesianally or Radially), starting with
        an initial offset of zero from the x-axis line.

     * `values()` takes a function which receives the current "layer" of the
          "stack" being created
         -- a "layer" is an array of values
         -- I'M NOT REALLY CLEAR ON WHAT'S GOING ON HERE

     * x() specifies:
        For each object being rendered, what is the name of the field that
        contains the value that should be rendered as this object's
        x-coordinate?
  */
  var stack = d3.layout.stack()
      .offset("zero")
      .values(function(d) { return d.values; })
      .x(function(d) { return d.date; })
      .y(function(d) { return d.value; });

  /* this turns our single list of objects into the following data structure:

     [
       {
         "key":"categ1",
         "values":[array of data]
       }, {
         "key":"categ2",
         "values":[array of data]
       }
     ]

  */
  var nest = d3.nest()
      .key(function(d) { return d.name; });

  /* Create an "area generator" */
  var area = d3.svg.area()
      .interpolate("monotone") // was "cardinal", which was better but went below zero
      .x(function(d) { return x(d.date); })
      .y0(function(d) { return y(d.y0); })
      .y1(function(d) { return y(d.y0 + d.y); });

  var svg = d3.select("#chart").append("svg")
      .attr("width", width + margin.left + margin.right)
      .attr("height", height + margin.top + margin.bottom)
    .append("g")
      .attr("transform", "translate(" + margin.left + "," + margin.top + ")");

  d3.json("task_data.json", function(data) {
    data.forEach(function(d) {
      d.date = format.parse(d.date);
      d.value = +d.value;
      d.name = d.name
    });

    var layers = stack(nest.entries(data));

    x.domain(d3.extent(data, function(d) { return d.date; }));
    y.domain([0, d3.max(data, function(d) { return d.y0 + d.y; })]);

    svg.selectAll(".layer")
        .data(layers)
      .enter().append("path")
        .attr("class", "layer")
        .attr("d", function(d) { return area(d.values); })
        .style("fill", function(d, i) { return z(i); });

    svg.append("g")
        .attr("class", "x axis")
        .attr("transform", "translate(0," + height + ")")
        .call(xAxis);

    svg.append("g")
        .attr("class", "y axis")
        .call(yAxis);

    // add legend -- stackoverflow.com/questions/14775962
    var legend = svg.selectAll('.g')
        .data(layers)
      .enter().append('g')
        .attr('class', 'legend');

    legend.append('rect')
        .attr('x', width - 60)
        .attr('y', function(d, i){ return i *  20;})
        .attr('width', 10)
        .attr('height', 10)
        .style('fill', function(d) {return z(d.key);});

    legend.append('text')
        .attr('x', width - 40)
        .attr('y', function(d, i){ return (i *  20) + 9;})
        .text(function(d){ return d.key; });});
